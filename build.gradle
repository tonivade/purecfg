plugins {
  id 'java-library'
  id 'jacoco'
  id 'maven-publish'
  id 'signing'
  id "com.diffplug.oomph.ide" version "3.32.1"
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

apply plugin: 'com.diffplug.eclipse.apt'

group = 'com.github.tonivade'
version = '0.4-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

jacoco {
  toolVersion = '0.8.5'
}

repositories {
  mavenLocal() 
  mavenCentral()
  maven {
    url = 'https://oss.sonatype.org/content/repositories/snapshots'
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

test {
  useJUnitPlatform()
}

dependencies {
  annotationProcessor 'com.github.tonivade:purefun-processor:3.0'
  api 'com.github.tonivade:purefun-free:3.0'
  implementation 'com.github.tonivade:purefun-monad:3.0'
  implementation 'com.github.tonivade:purefun-effect:3.0'
  runtimeOnly 'com.github.tonivade:purefun-instances:2.2'
  implementation 'com.moandjiezana.toml:toml4j:0.7.2'
  testImplementation 'com.github.tonivade:purecheck:0.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
  testImplementation 'org.junit.platform:junit-platform-runner:1.8.0'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      
      from components.java

      pom {
        name = 'PureDBC'
        description = 'Pure Functional Configuration Library'
        url = 'https://github.com/tonivade/purecfg'
        inceptionYear = '2020'

        scm {
          url = 'https://github.com/tonivade/purecfg'
          connection = 'scm:https://github.com/tonivade/purecfg.git'
          developerConnection = 'scm:git://github.com/tonivade/purecfg.git'
        }

        licenses {
          license {
            name = 'The MIT License (MIT)'
            url = 'https://github.com/tonivade/purecfg/blob/master/LICENSE'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'tonivade'
            name = 'Antonio Mu√±oz'
            email = 'antoniogmc@gmail.com'
          }
        }
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
  onlyIf { isReleaseVersion }
}

nexusPublishing {
  repositories {
    sonatype {
      
      stagingProfileId = '19a96b937cdb5'
      
      username = project.findProperty('nexusUsername')  
      password = project.findProperty('nexusPassword')
    }
  }
  
  clientTimeout = Duration.ofSeconds(300)
  connectTimeout = Duration.ofSeconds(60)

  transitionCheckOptions {
    maxRetries.set(40)
    delayBetween.set(java.time.Duration.ofMillis(3000))
  }
}
